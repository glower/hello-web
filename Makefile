APP?=service
PORT?=80080
CMD?=cmd/service/main.go
PROJECT?=github.com/glower/hello-web
RELEASE?=0.0.3
COMMIT?=$(shell git rev-parse --short HEAD)
BUILD_TIME?=$(shell date -u '+%Y-%m-%d_%H:%M:%S')
GOOS?=linux

LDFLAGS		+= -X ${PROJECT}/version.Release=$(RELEASE)
LDFLAGS		+= -X ${PROJECT}/version.Commit=$(COMMIT)
LDFLAGS		+= -X ${PROJECT}/version.BuildTime=$(BUILD_TIME)

clean:
	rm -f ${APP}

build: clean
	@echo "++ Building on ${DRONE_SERVER}"
	@echo "CONFIG_NAME=$(CONFIG_NAME) \
-p KUBE_URL=$(KUBE_URL) \
-p KUBE_TOKEN=$(KUBE_TOKEN) \
-p KUBE_STORAGE_CLASS=$(KUBE_STORAGE_CLASS) \
-p SUBDOMAIN=$(SUBDOMAIN) \
-p TLD=$(TLD) \
-p GCP_PROJECT_NAME=$GCP_PROJECT_NAME \
-p GCP_SECRET_NAME=$GCP_SECRET_NAME \
-p GCP_SECRET_KEY=$GCP_SECRET_KEY \
-p GCP_SECRET=$GCP_SECRET \
-p NAMESPACE_PREFIX=$NAMESPACE_PREFIX \
-p NGINX_INGRESS_HELM_VALUES=$NGINX_INGRESS_HELM_VALUES \
-p EXTERNAL_DNS_PROVIDER=$EXTERNAL_DNS_PROVIDER \
-p EXTERNAL_DNS_HELM_VALUES=$EXTERNAL_DNS_HELM_VALUES \
-p CERT_MANAGER_ISSUER=$CERT_MANAGER_ISSUER \
-p CERT_MANAGER_ADDONS_HELM_VALUES=$CERT_MANAGER_ADDONS_HELM_VALUES \
-p COMPONENTS=$COMPONENTS \
-p HELM_PAAS_VALUES=$HELM_PAAS_VALUES \
-p DRONE_ORGS=$DRONE_ORGS \
-p DRONE_ADMINS=$DRONE_ADMINS \
-p DRONE_GITHUB_CLIENT_ID=$DRONE_GITHUB_CLIENT_ID \
-p DRONE_GITHUB_CLIENT_SECRET=$DRONE_GITHUB_CLIENT_SECRET \
-p KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
-p KEYCLOAK_SONARQUBE_CLIENT_SECRET=$KEYCLOAK_SONARQUBE_CLIENT_SECRET \
-p KEYCLOAK_ARTIFACTORY_CLIENT_SECRET=$KEYCLOAK_ARTIFACTORY_CLIENT_SECRET \
-p KEYCLOAK_GITHUB_CLIENT_ID=$KEYCLOAK_GITHUB_CLIENT_ID \
-p KEYCLOAK_GITHUB_CLIENT_SECRET=$KEYCLOAK_GITHUB_CLIENT_SECRET \
-p SONARQUBE_ADMIN_PASSWORD=$SONARQUBE_ADMIN_PASSWORD \
-p ARTIFACTORY_ADMIN_PASSWORD=$ARTIFACTORY_ADMIN_PASSWORD \
-p ARTIFACTORY_CONFIGURATION=$ARTIFACTORY_CONFIGURATION \
-p ARTIFACTORY_LICENSE=$ARTIFACTORY_LICENSE \
-p TU_USERNAME=$TU_USERNAME \
-p TU_PASSWORD=$TU_PASSWORD \
-p TU_MAIL=$TU_MAIL \
-p INT_ARTIFACTORY=$INT_ARTIFACTORY \
-p INT_ARTIFACTORY_USERNAME=$INT_ARTIFACTORY_USERNAME \
-p INT_ARTIFACTORY_PASSWORD=$INT_ARTIFACTORY_PASSWORD \
-p INT_DOCKER_REGISTRY=$INT_DOCKER_REGISTRY \
-p INT_DOCKER_REPOSITORY=$INT_DOCKER_REPOSITORY  \
-p INT_DOCKER_USERNAME=$INT_DOCKER_USERNAME \
-p INT_DOCKER_PASSWORD=$INT_DOCKER_PASSWORD \
-p INT_HELM_REPOSITORY=$INT_HELM_REPOSITORY \
-p INT_HELM_USERNAME=$INT_HELM_USERNAME \
-p INT_HELM_PASSWORD=$INT_HELM_PASSWORD \
-p POLICY_REPO_PRIVATE_KEY=$POLICY_REPO_PRIVATE_KEY \
-p DOCKER_REGISTRY=$DOCKER_REGISTRY \
-p DOCKER_USERNAME=$DOCKER_USERNAME \
-p DOCKER_PASSWORD=$DOCKER_PASSWORD"
	CGO_ENABLED=0 GOOS=${GOOS} cd cmd/service && go build \
		-ldflags "$(LDFLAGS) -s -w" -o ${APP} .

install:
	@echo "++ Installing"
	CGO_ENABLED=0 GOOS=${GOOS} go install -ldflags "$(LDFLAGS) -w -s" $(PROJECT)/cmd/service

docker: build
	docker build -t welmoki/hello-web:latest .

run: docker
	docker stop $(APP):$(RELEASE) || true && docker rm $(APP):$(RELEASE) || true
	docker run --name ${APP} - name: ${PORT}:${PORT} --rm -e "PORT=${PORT}" $(APP):$(RELEASE)

deploy: docker
	@echo "++ Pushing app latest build"
	docker push welmoki/hello-web:latest

test:
	@echo "++ Running tests for ${FOO}"
	go test -v -race ./...
